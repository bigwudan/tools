!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CIRCLEQ_EMPTY	queue.h	559;"	d
CIRCLEQ_ENTRY	queue.h	479;"	d
CIRCLEQ_FIRST	queue.h	560;"	d
CIRCLEQ_FOREACH	queue.h	546;"	d
CIRCLEQ_FOREACH_REVERSE	queue.h	551;"	d
CIRCLEQ_HEAD	queue.h	470;"	d
CIRCLEQ_HEAD_INITIALIZER	queue.h	476;"	d
CIRCLEQ_INIT	queue.h	488;"	d
CIRCLEQ_INSERT_AFTER	queue.h	493;"	d
CIRCLEQ_INSERT_BEFORE	queue.h	503;"	d
CIRCLEQ_INSERT_HEAD	queue.h	513;"	d
CIRCLEQ_INSERT_TAIL	queue.h	523;"	d
CIRCLEQ_LAST	queue.h	561;"	d
CIRCLEQ_LOOP_NEXT	queue.h	565;"	d
CIRCLEQ_LOOP_PREV	queue.h	569;"	d
CIRCLEQ_NEXT	queue.h	562;"	d
CIRCLEQ_PREV	queue.h	563;"	d
CIRCLEQ_REMOVE	queue.h	533;"	d
FRAME_RECV_CACHE_MAX	analysis_protocol.h	9;"	d
FRAME_SEND_DATA	analysis_protocol.h	10;"	d
LIST_EMPTY	queue.h	142;"	d
LIST_ENTRY	queue.h	92;"	d
LIST_FIRST	queue.h	143;"	d
LIST_FOREACH	queue.h	134;"	d
LIST_HEAD	queue.h	84;"	d
LIST_HEAD_INITIALIZER	queue.h	89;"	d
LIST_INIT	queue.h	101;"	d
LIST_INSERT_AFTER	queue.h	105;"	d
LIST_INSERT_BEFORE	queue.h	113;"	d
LIST_INSERT_HEAD	queue.h	120;"	d
LIST_NEXT	queue.h	144;"	d
LIST_REMOVE	queue.h	127;"	d
MAX_CHAIN_NUM	analysis_protocol_tools.h	6;"	d
SELF_FREE	analysis_protocol.h	13;"	d
SELF_MALLOC	analysis_protocol.h	12;"	d
SIMPLEQ_EMPTY	queue.h	359;"	d
SIMPLEQ_ENTRY	queue.h	302;"	d
SIMPLEQ_FIRST	queue.h	360;"	d
SIMPLEQ_FOREACH	queue.h	351;"	d
SIMPLEQ_HEAD	queue.h	293;"	d
SIMPLEQ_HEAD_INITIALIZER	queue.h	299;"	d
SIMPLEQ_INIT	queue.h	310;"	d
SIMPLEQ_INSERT_AFTER	queue.h	327;"	d
SIMPLEQ_INSERT_HEAD	queue.h	315;"	d
SIMPLEQ_INSERT_TAIL	queue.h	321;"	d
SIMPLEQ_NEXT	queue.h	361;"	d
SIMPLEQ_REMOVE	queue.h	338;"	d
SIMPLEQ_REMOVE_HEAD	queue.h	333;"	d
SLIST_EMPTY	queue.h	203;"	d
SLIST_ENTRY	queue.h	158;"	d
SLIST_FIRST	queue.h	204;"	d
SLIST_FOREACH	queue.h	197;"	d
SLIST_HEAD	queue.h	150;"	d
SLIST_HEAD_INITIALIZER	queue.h	155;"	d
SLIST_INIT	queue.h	166;"	d
SLIST_INSERT_AFTER	queue.h	170;"	d
SLIST_INSERT_HEAD	queue.h	175;"	d
SLIST_NEXT	queue.h	205;"	d
SLIST_REMOVE	queue.h	184;"	d
SLIST_REMOVE_HEAD	queue.h	180;"	d
STAILQ_CONCAT	queue.h	274;"	d
STAILQ_EMPTY	queue.h	285;"	d
STAILQ_ENTRY	queue.h	220;"	d
STAILQ_FIRST	queue.h	286;"	d
STAILQ_FOREACH	queue.h	269;"	d
STAILQ_HEAD	queue.h	211;"	d
STAILQ_HEAD_INITIALIZER	queue.h	217;"	d
STAILQ_INIT	queue.h	228;"	d
STAILQ_INSERT_AFTER	queue.h	245;"	d
STAILQ_INSERT_HEAD	queue.h	233;"	d
STAILQ_INSERT_TAIL	queue.h	239;"	d
STAILQ_NEXT	queue.h	287;"	d
STAILQ_REMOVE	queue.h	256;"	d
STAILQ_REMOVE_HEAD	queue.h	251;"	d
TAILQ_CONCAT	queue.h	445;"	d
TAILQ_EMPTY	queue.h	457;"	d
TAILQ_ENTRY	queue.h	382;"	d
TAILQ_FIRST	queue.h	458;"	d
TAILQ_FOREACH	queue.h	435;"	d
TAILQ_FOREACH_REVERSE	queue.h	440;"	d
TAILQ_HEAD	queue.h	372;"	d
TAILQ_HEAD_INITIALIZER	queue.h	374;"	d
TAILQ_INIT	queue.h	387;"	d
TAILQ_INSERT_AFTER	queue.h	409;"	d
TAILQ_INSERT_BEFORE	queue.h	419;"	d
TAILQ_INSERT_HEAD	queue.h	392;"	d
TAILQ_INSERT_TAIL	queue.h	402;"	d
TAILQ_LAST	queue.h	461;"	d
TAILQ_NEXT	queue.h	459;"	d
TAILQ_PREV	queue.h	463;"	d
TAILQ_REMOVE	queue.h	426;"	d
WIFI	analysis_protocol.h	/^enum analysis_protocol_state_tag{ YINGXUE, WIFI  };$/;"	e	enum:analysis_protocol_state_tag
YINGXUE	analysis_protocol.h	/^enum analysis_protocol_state_tag{ YINGXUE, WIFI  };$/;"	e	enum:analysis_protocol_state_tag
_ANALYSIS_PROTOCOL_H_	analysis_protocol.h	2;"	d
_ANALYSIS_PROTOCOL_TOOLS_H	analysis_protocol_tools.h	2;"	d
_SYS_QUEUE_H_	queue.h	33;"	d
_TAILQ_ENTRY	queue.h	377;"	d
_TAILQ_HEAD	queue.h	367;"	d
analysis_protocol_base_tag	analysis_protocol.h	/^struct analysis_protocol_base_tag$/;"	s
analysis_protocol_frame_recv_cache	analysis_protocol.h	/^struct analysis_protocol_frame_recv_cache$/;"	s
analysis_protocol_init	analysis_protocol.c	/^analysis_protocol_init( void *arg, frame_recv_fun_tag frame_recv_bc,$/;"	f
analysis_protocol_overtime_send	analysis_protocol.c	/^analysis_protocol_overtime_send(struct analysis_protocol_base_tag *base )$/;"	f
analysis_protocol_read_chain_list	analysis_protocol.c	/^analysis_protocol_read_chain_list(struct chain_list_tag *chain_list, uint8_t *src, uint8_t len )$/;"	f
analysis_protocol_send_frame_list_tag	analysis_protocol.h	/^struct analysis_protocol_send_frame_list_tag$/;"	s
analysis_protocol_send_frame_to_dest_tag	analysis_protocol.h	/^struct analysis_protocol_send_frame_to_dest_tag$/;"	s
analysis_protocol_state_tag	analysis_protocol.h	/^enum analysis_protocol_state_tag{ YINGXUE, WIFI  };$/;"	g
analysis_protocol_write_chain_list	analysis_protocol.c	/^analysis_protocol_write_chain_list(struct chain_list_tag *chain_list, uint8_t *src, uint8_t len )$/;"	f
buf	analysis_protocol_tools.h	/^	uint8_t buf[MAX_CHAIN_NUM];$/;"	m	struct:chain_list_tag
chain_list	analysis_protocol.h	/^    struct chain_list_tag *chain_list;$/;"	m	struct:analysis_protocol_base_tag	typeref:struct:analysis_protocol_base_tag::chain_list_tag
chain_list_tag	analysis_protocol_tools.h	/^struct chain_list_tag{$/;"	s
check_replay_func	analysis_protocol.h	/^    check_reply_func_tag check_replay_func;$/;"	m	struct:analysis_protocol_base_tag
check_reply_func_tag	analysis_protocol.h	/^typedef uint8_t (*check_reply_func_tag)(struct analysis_protocol_base_tag *);$/;"	t
count	analysis_protocol_tools.h	/^	uint8_t count; \/\/当前数量$/;"	m	struct:chain_list_tag
create_chain_list	analysis_protocol_tools.h	18;"	d
curr_cache_time	analysis_protocol.h	/^    struct timeval curr_cache_time;$/;"	m	struct:analysis_protocol_base_tag	typeref:struct:analysis_protocol_base_tag::timeval
data	analysis_protocol.h	/^    uint8_t data[50];$/;"	m	struct:yingxue_frame_tag
data	analysis_protocol.h	/^    uint8_t data[FRAME_RECV_CACHE_MAX]; \/\/缓存数据$/;"	m	struct:analysis_protocol_frame_recv_cache
data	analysis_protocol.h	/^    uint8_t data[FRAME_SEND_DATA]; \/\/保存的命令$/;"	m	struct:analysis_protocol_send_frame_to_dest_tag
data	analysis_protocol.h	/^    uint8_t data[FRAME_SEND_DATA]; \/\/保存的命令数据$/;"	m	struct:analysis_protocol_send_frame_list_tag
data2	analysis_protocol.h	/^    uint8_t data2;$/;"	m	struct:yingxue_frame_tag
data3	analysis_protocol.h	/^    uint8_t data3;$/;"	m	struct:yingxue_frame_tag
data_len	analysis_protocol.h	/^    uint8_t data_len; \/\/命令长度$/;"	m	struct:analysis_protocol_send_frame_to_dest_tag
data_len	analysis_protocol.h	/^    uint8_t data_len; \/\/数据长度$/;"	m	struct:analysis_protocol_send_frame_list_tag
frame_recv_cache	analysis_protocol.h	/^    struct analysis_protocol_frame_recv_cache frame_recv_cache;$/;"	m	struct:analysis_protocol_base_tag	typeref:struct:analysis_protocol_base_tag::analysis_protocol_frame_recv_cache
frame_recv_fun	analysis_protocol.h	/^    frame_recv_fun_tag frame_recv_fun;$/;"	m	struct:analysis_protocol_base_tag
frame_recv_fun_tag	analysis_protocol.h	/^typedef uint8_t (*frame_recv_fun_tag)(struct analysis_protocol_base_tag *); $/;"	t
front	analysis_protocol_tools.h	/^	uint8_t front; \/\/头结点$/;"	m	struct:chain_list_tag
in_chain_list	analysis_protocol_tools.h	31;"	d
is_empty_chain_list	analysis_protocol_tools.h	21;"	d
is_full_chain_list	analysis_protocol_tools.h	26;"	d
last_send_time	analysis_protocol.h	/^    struct timeval last_send_time;\/\/最后发送的时间$/;"	m	struct:analysis_protocol_send_frame_list_tag	typeref:struct:analysis_protocol_send_frame_list_tag::timeval
main	main.c	/^int main()$/;"	f
next	analysis_protocol.h	/^    TAILQ_ENTRY(analysis_protocol_send_frame_list_tag)  next; \/\/下一个节点  $/;"	m	struct:analysis_protocol_send_frame_list_tag
next	analysis_protocol.h	/^    TAILQ_ENTRY(analysis_protocol_send_frame_to_dest_tag)  next; \/\/下一个节点  $/;"	m	struct:analysis_protocol_send_frame_to_dest_tag
out_chain_list	analysis_protocol_tools.h	34;"	d
rear	analysis_protocol_tools.h	/^	uint8_t rear; \/\/尾结点$/;"	m	struct:chain_list_tag
recv_frame	analysis_protocol.h	/^    void *recv_frame;$/;"	m	struct:analysis_protocol_base_tag
repeat_during	analysis_protocol.h	/^    uint8_t repeat_during ; \/\/重发时间间隔$/;"	m	struct:analysis_protocol_send_frame_list_tag
repeat_max	analysis_protocol.h	/^    uint8_t repeat_max; \/\/最大重发次数$/;"	m	struct:analysis_protocol_send_frame_list_tag
repeat_num	analysis_protocol.h	/^    uint8_t repeat_num; \/\/重发次数$/;"	m	struct:analysis_protocol_send_frame_list_tag
self_process_frame	analysis_protocol.h	/^    self_process_frame_tag self_process_frame; $/;"	m	struct:analysis_protocol_base_tag
self_process_frame_tag	analysis_protocol.h	/^typedef uint8_t (*self_process_frame_tag)(struct analysis_protocol_base_tag *, void *);$/;"	t
send_frame_dest_head	analysis_protocol.h	/^    TAILQ_HEAD(frame_send_dest_head_tag, analysis_protocol_send_frame_to_dest_tag)   send_frame_dest_head;$/;"	m	struct:analysis_protocol_base_tag
send_frame_head	analysis_protocol.h	/^    TAILQ_HEAD(frame_send_head_tag, analysis_protocol_send_frame_list_tag)   send_frame_head;$/;"	m	struct:analysis_protocol_base_tag
send_func	analysis_protocol.h	/^    send_func_tag send_func;$/;"	m	struct:analysis_protocol_base_tag
send_func_bc	main.c	/^send_func_bc(struct analysis_protocol_base_tag *base)$/;"	f
send_func_tag	analysis_protocol.h	/^typedef uint8_t (*send_func_tag)(struct analysis_protocol_base_tag *);$/;"	t
state	analysis_protocol.h	/^    enum analysis_protocol_state_tag state; $/;"	m	struct:analysis_protocol_base_tag	typeref:enum:analysis_protocol_base_tag::analysis_protocol_state_tag
state	analysis_protocol.h	/^    uint8_t state; \/\/自己定义状态$/;"	m	struct:analysis_protocol_send_frame_list_tag
test_fun	main.c	/^void test_fun( struct analysis_protocol_base_tag *base )$/;"	f
tot_len	analysis_protocol.h	/^    uint8_t tot_len; \/\/总数据的长度$/;"	m	struct:analysis_protocol_frame_recv_cache
use_len	analysis_protocol.h	/^    uint8_t use_len; \/\/已经使用的长度$/;"	m	struct:analysis_protocol_frame_recv_cache
wifi_1	analysis_protocol.h	/^    uint8_t wifi_1;$/;"	m	struct:wifi_frame_tag
wifi_2	analysis_protocol.h	/^    uint8_t wifi_2;$/;"	m	struct:wifi_frame_tag
wifi_frame_tag	analysis_protocol.h	/^struct wifi_frame_tag{$/;"	s
yingxue_frame_recv_fun	main.c	/^yingxue_frame_recv_fun(struct analysis_protocol_base_tag *base)$/;"	f
yingxue_frame_tag	analysis_protocol.h	/^struct yingxue_frame_tag{$/;"	s
yingxue_process_frame	main.c	/^yingxue_process_frame(struct analysis_protocol_base_tag *base, void *arg)$/;"	f
